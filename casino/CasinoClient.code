.globl	constructor
.public	constructor
.type	constructor, @function
GETGLOB 1
ISNULL
PUSHCONT {
	CALL $c4_to_c7_with_init_storage$
}
IF
;; constructor protection
GETGLOB 6
THROWIF 51
PUSHINT 1
SETGLOB 6
;; end constructor protection
; Decode input parameters
; Decode casino
LDMSGADDR
ENDS
;; param: casino
; constructor CasinoClient
GETGLOB 2
NEQINT 0
THROWIFNOT 103
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
GETGLOB 2
;; ==
EQUAL
THROWIFNOT 102
ACCEPT
; expValue
; end expValue
;; push identifier casino
DUP
; colValue
SETGLOB 10
; end colValue
DROP
; end constructor CasinoClient
CALL $c7_to_c4$
TRUE
SETGLOB 7

.globl	receiveAnswer
.public	receiveAnswer
.type	receiveAnswer, @function
GETGLOB 1
ISNULL
PUSHCONT {
	CALL $c4_to_c7$
}
IF
; Decode input parameters
; Decode code
LDU 8
; Decode comment
LDU 128
ENDS
;; param: code
;; param: comment
; function receiveAnswer
;; get member sender
GETGLOB 9
;; push identifier m_casino
GETGLOB 10
SDEQ
THROWIFNOT 101
ACCEPT
; expValue
; end expValue
;; push identifier code
PUSH S1
; colValue
SETGLOB 11
; end colValue
; expValue
; end expValue
;; push identifier comment
DUP
; colValue
SETGLOB 12
; end colValue
DROP2
; end function receiveAnswer
CALL $c7_to_c4$
TRUE
SETGLOB 7

.globl	receiveAnswer_internal
.type	receiveAnswer_internal, @function
;; param: code
;; param: comment
; function receiveAnswer
;; get member sender
GETGLOB 9
;; push identifier m_casino
GETGLOB 10
SDEQ
THROWIFNOT 101
ACCEPT
; expValue
; end expValue
;; push identifier code
PUSH S1
; colValue
SETGLOB 11
; end colValue
; expValue
; end expValue
;; push identifier comment
DUP
; colValue
SETGLOB 12
; end colValue
DROP2
; end function receiveAnswer

.globl	getVal
.public	getVal
.type	getVal, @function
GETGLOB 1
ISNULL
PUSHCONT {
	CALL $c4_to_c7$
}
IF
PUSH S1
PUSHCONT {
	LDU 32
	GETGLOB 4
	ROT
	SETINDEXQ 5
	SETGLOB 4
}
IFNOT
; Decode input parameters
ENDS
; function getVal
;; ret param: code
PUSHINT 0
;; ret param: comment
PUSHINT 0
; expValue
; end expValue
;; push identifier m_lastCode
GETGLOB 11
; colValue
POP S2
; end colValue
; expValue
; end expValue
;; push identifier m_lastComment
GETGLOB 12
; colValue
NIP
; end colValue
;; returning named params
;; emitting 2 value(s)
PUSH S2
EQINT -1
PUSHCONT {
	PUSH S4
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 96
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST xad164363
	PUSH S2
	STUR 8
	PUSH S1
	STUR 128
	ENDC
	PUSHINT 1
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 104
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	GETGLOB 4
	INDEX 5
	STUR 32
	PUSH S2
	STUR 8
	PUSH S1
	STUR 128
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
DROP2
; end function getVal
PUSHCONT {
	CALL $c7_to_c4$
}
IF
TRUE
SETGLOB 7

.globl	getVal_internal
.type	getVal_internal, @function
; function getVal
;; ret param: code
PUSHINT 0
;; ret param: comment
PUSHINT 0
; expValue
; end expValue
;; push identifier m_lastCode
GETGLOB 11
; colValue
POP S2
; end colValue
; expValue
; end expValue
;; push identifier m_lastComment
GETGLOB 12
; colValue
NIP
; end colValue
;; returning named params
; end function getVal

.globl	setCasino
.public	setCasino
.type	setCasino, @function
GETGLOB 1
ISNULL
PUSHCONT {
	CALL $c4_to_c7$
}
IF
; Decode input parameters
; Decode casino
LDMSGADDR
ENDS
;; param: casino
; modifier onlyOwner
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
GETGLOB 2
;; ==
EQUAL
THROWIFNOT 102
ACCEPT
; function setCasino
; expValue
; end expValue
;; push identifier casino
DUP
; colValue
SETGLOB 10
; end colValue
; end function setCasino
DROP
; end modifier onlyOwner
CALL $c7_to_c4$
TRUE
SETGLOB 7

.globl	setCasino_internal
.type	setCasino_internal, @function
;; param: casino
; modifier onlyOwner
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
GETGLOB 2
;; ==
EQUAL
THROWIFNOT 102
ACCEPT
; function setCasino
; expValue
; end expValue
;; push identifier casino
DUP
; colValue
SETGLOB 10
; end colValue
; end function setCasino
DROP
; end modifier onlyOwner

.globl	bet
.public	bet
.type	bet, @function
GETGLOB 1
ISNULL
PUSHCONT {
	CALL $c4_to_c7$
}
IF
; Decode input parameters
; Decode value
LDU 128
; Decode number
LDU 8
ENDS
;; param: value
;; param: number
; modifier onlyOwner
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
GETGLOB 2
;; ==
EQUAL
THROWIFNOT 102
ACCEPT
; function bet
;; Remote call ICasino.singleBet
;; push identifier value
PUSH S1
;; push identifier m_casino
GETGLOB 10
NEWC
STSLICECONST x62_
STSLICE
SWAP
STGRAMS
PUSHINT 105
STZEROES
STSLICECONST 0
STSLICECONST 0
STSLICECONST x7e54a047
;; number
;; push identifier number
PUSH S1
STUR 8
ENDC
PUSHINT 1
SENDRAWMSG
; end function bet
DROP2
; end modifier onlyOwner
PUSHCONT {
	CALL $c7_to_c4$
}
IF
TRUE
SETGLOB 7

.globl	bet_internal
.type	bet_internal, @function
;; param: value
;; param: number
; modifier onlyOwner
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
GETGLOB 2
;; ==
EQUAL
THROWIFNOT 102
ACCEPT
; function bet
;; Remote call ICasino.singleBet
;; push identifier value
PUSH S1
;; push identifier m_casino
GETGLOB 10
NEWC
STSLICECONST x62_
STSLICE
SWAP
STGRAMS
PUSHINT 105
STZEROES
STSLICECONST 0
STSLICECONST 0
STSLICECONST x7e54a047
;; number
;; push identifier number
PUSH S1
STUR 8
ENDC
PUSHINT 1
SENDRAWMSG
; end function bet
DROP2
; end modifier onlyOwner

.globl	betDozen
.public	betDozen
.type	betDozen, @function
GETGLOB 1
ISNULL
PUSHCONT {
	CALL $c4_to_c7$
}
IF
; Decode input parameters
; Decode value
LDU 128
; Decode number
LDU 8
ENDS
;; param: value
;; param: number
; modifier onlyOwner
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
GETGLOB 2
;; ==
EQUAL
THROWIFNOT 102
ACCEPT
; function betDozen
;; Remote call ICasino.dozenBet
;; push identifier value
PUSH S1
;; push identifier m_casino
GETGLOB 10
NEWC
STSLICECONST x62_
STSLICE
SWAP
STGRAMS
PUSHINT 105
STZEROES
STSLICECONST 0
STSLICECONST 0
STSLICECONST x72e71fde
;; number
;; push identifier number
PUSH S1
STUR 8
ENDC
PUSHINT 1
SENDRAWMSG
; end function betDozen
DROP2
; end modifier onlyOwner
PUSHCONT {
	CALL $c7_to_c4$
}
IF
TRUE
SETGLOB 7

.globl	betDozen_internal
.type	betDozen_internal, @function
;; param: value
;; param: number
; modifier onlyOwner
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
GETGLOB 2
;; ==
EQUAL
THROWIFNOT 102
ACCEPT
; function betDozen
;; Remote call ICasino.dozenBet
;; push identifier value
PUSH S1
;; push identifier m_casino
GETGLOB 10
NEWC
STSLICECONST x62_
STSLICE
SWAP
STGRAMS
PUSHINT 105
STZEROES
STSLICECONST 0
STSLICECONST 0
STSLICECONST x72e71fde
;; number
;; push identifier number
PUSH S1
STUR 8
ENDC
PUSHINT 1
SENDRAWMSG
; end function betDozen
DROP2
; end modifier onlyOwner

.globl	betColumn
.public	betColumn
.type	betColumn, @function
GETGLOB 1
ISNULL
PUSHCONT {
	CALL $c4_to_c7$
}
IF
; Decode input parameters
; Decode value
LDU 128
; Decode number
LDU 8
ENDS
;; param: value
;; param: number
; modifier onlyOwner
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
GETGLOB 2
;; ==
EQUAL
THROWIFNOT 102
ACCEPT
; function betColumn
;; Remote call ICasino.columnBet
;; push identifier value
PUSH S1
;; push identifier m_casino
GETGLOB 10
NEWC
STSLICECONST x62_
STSLICE
SWAP
STGRAMS
PUSHINT 105
STZEROES
STSLICECONST 0
STSLICECONST 0
STSLICECONST x53787db4
;; number
;; push identifier number
PUSH S1
STUR 8
ENDC
PUSHINT 1
SENDRAWMSG
; end function betColumn
DROP2
; end modifier onlyOwner
PUSHCONT {
	CALL $c7_to_c4$
}
IF
TRUE
SETGLOB 7

.globl	betColumn_internal
.type	betColumn_internal, @function
;; param: value
;; param: number
; modifier onlyOwner
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
GETGLOB 2
;; ==
EQUAL
THROWIFNOT 102
ACCEPT
; function betColumn
;; Remote call ICasino.columnBet
;; push identifier value
PUSH S1
;; push identifier m_casino
GETGLOB 10
NEWC
STSLICECONST x62_
STSLICE
SWAP
STGRAMS
PUSHINT 105
STZEROES
STSLICECONST 0
STSLICECONST 0
STSLICECONST x53787db4
;; number
;; push identifier number
PUSH S1
STUR 8
ENDC
PUSHINT 1
SENDRAWMSG
; end function betColumn
DROP2
; end modifier onlyOwner

.globl	betColor
.public	betColor
.type	betColor, @function
GETGLOB 1
ISNULL
PUSHCONT {
	CALL $c4_to_c7$
}
IF
; Decode input parameters
; Decode value
LDU 128
; Decode isRed
LDU 8
ENDS
;; param: value
;; param: isRed
; modifier onlyOwner
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
GETGLOB 2
;; ==
EQUAL
THROWIFNOT 102
ACCEPT
; function betColor
;; Remote call ICasino.colorBet
;; push identifier value
PUSH S1
;; push identifier m_casino
GETGLOB 10
NEWC
STSLICECONST x62_
STSLICE
SWAP
STGRAMS
PUSHINT 105
STZEROES
STSLICECONST 0
STSLICECONST 0
STSLICECONST x1b001d32
;; isRed
;; push identifier isRed
PUSH S1
STUR 8
ENDC
PUSHINT 1
SENDRAWMSG
; end function betColor
DROP2
; end modifier onlyOwner
PUSHCONT {
	CALL $c7_to_c4$
}
IF
TRUE
SETGLOB 7

.globl	betColor_internal
.type	betColor_internal, @function
;; param: value
;; param: isRed
; modifier onlyOwner
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
GETGLOB 2
;; ==
EQUAL
THROWIFNOT 102
ACCEPT
; function betColor
;; Remote call ICasino.colorBet
;; push identifier value
PUSH S1
;; push identifier m_casino
GETGLOB 10
NEWC
STSLICECONST x62_
STSLICE
SWAP
STGRAMS
PUSHINT 105
STZEROES
STSLICECONST 0
STSLICECONST 0
STSLICECONST x1b001d32
;; isRed
;; push identifier isRed
PUSH S1
STUR 8
ENDC
PUSHINT 1
SENDRAWMSG
; end function betColor
DROP2
; end modifier onlyOwner

.globl	betGreatSmall
.public	betGreatSmall
.type	betGreatSmall, @function
GETGLOB 1
ISNULL
PUSHCONT {
	CALL $c4_to_c7$
}
IF
; Decode input parameters
; Decode value
LDU 128
; Decode isGreat
LDU 8
ENDS
;; param: value
;; param: isGreat
; modifier onlyOwner
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
GETGLOB 2
;; ==
EQUAL
THROWIFNOT 102
ACCEPT
; function betGreatSmall
;; Remote call ICasino.greatSmallBet
;; push identifier value
PUSH S1
;; push identifier m_casino
GETGLOB 10
NEWC
STSLICECONST x62_
STSLICE
SWAP
STGRAMS
PUSHINT 105
STZEROES
STSLICECONST 0
STSLICECONST 0
STSLICECONST x368985e7
;; isGreat
;; push identifier isGreat
PUSH S1
STUR 8
ENDC
PUSHINT 1
SENDRAWMSG
; end function betGreatSmall
DROP2
; end modifier onlyOwner
PUSHCONT {
	CALL $c7_to_c4$
}
IF
TRUE
SETGLOB 7

.globl	betGreatSmall_internal
.type	betGreatSmall_internal, @function
;; param: value
;; param: isGreat
; modifier onlyOwner
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
GETGLOB 2
;; ==
EQUAL
THROWIFNOT 102
ACCEPT
; function betGreatSmall
;; Remote call ICasino.greatSmallBet
;; push identifier value
PUSH S1
;; push identifier m_casino
GETGLOB 10
NEWC
STSLICECONST x62_
STSLICE
SWAP
STGRAMS
PUSHINT 105
STZEROES
STSLICECONST 0
STSLICECONST 0
STSLICECONST x368985e7
;; isGreat
;; push identifier isGreat
PUSH S1
STUR 8
ENDC
PUSHINT 1
SENDRAWMSG
; end function betGreatSmall
DROP2
; end modifier onlyOwner

.globl	betParity
.public	betParity
.type	betParity, @function
GETGLOB 1
ISNULL
PUSHCONT {
	CALL $c4_to_c7$
}
IF
; Decode input parameters
; Decode value
LDU 128
; Decode isEven
LDU 8
ENDS
;; param: value
;; param: isEven
; modifier onlyOwner
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
GETGLOB 2
;; ==
EQUAL
THROWIFNOT 102
ACCEPT
; function betParity
;; Remote call ICasino.parityBet
;; push identifier value
PUSH S1
;; push identifier m_casino
GETGLOB 10
NEWC
STSLICECONST x62_
STSLICE
SWAP
STGRAMS
PUSHINT 105
STZEROES
STSLICECONST 0
STSLICECONST 0
STSLICECONST x1e12f025
;; isEven
;; push identifier isEven
PUSH S1
STUR 8
ENDC
PUSHINT 1
SENDRAWMSG
; end function betParity
DROP2
; end modifier onlyOwner
PUSHCONT {
	CALL $c7_to_c4$
}
IF
TRUE
SETGLOB 7

.globl	betParity_internal
.type	betParity_internal, @function
;; param: value
;; param: isEven
; modifier onlyOwner
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
GETGLOB 2
;; ==
EQUAL
THROWIFNOT 102
ACCEPT
; function betParity
;; Remote call ICasino.parityBet
;; push identifier value
PUSH S1
;; push identifier m_casino
GETGLOB 10
NEWC
STSLICECONST x62_
STSLICE
SWAP
STGRAMS
PUSHINT 105
STZEROES
STSLICECONST 0
STSLICECONST 0
STSLICECONST x1e12f025
;; isEven
;; push identifier isEven
PUSH S1
STUR 8
ENDC
PUSHINT 1
SENDRAWMSG
; end function betParity
DROP2
; end modifier onlyOwner

.globl	c7_to_c4
.type	c7_to_c4, @function
GETGLOB 2
NEWC
STU 256
GETGLOB 3
STUR 64
GETGLOB 6
STUR 1
GETGLOB 10
GETGLOB 11
GETGLOB 12
REVERSE 4, 0
STSLICE
STU 8
STU 128
ENDC
POP C4

.globl	c4_to_c7
.type	c4_to_c7, @function
PUSHROOT
CTOS        ; c4
LDU 256      ; pubkey c4
LDU 64      ; pubkey timestamp c4
LDU 1       ; pubkey [timestamp] constructor_flag memory
LDMSGADDR
LDU 8
PLDU 128
SETGLOB 12
SETGLOB 11
SETGLOB 10
TRUE
SETGLOB 1   ; pubkey [timestamp] constructor_flag
SETGLOB 6   ; pubkey [timestamp]
SETGLOB 3   ; D
SETGLOB 2

.macro c4_to_c7_with_init_storage
PUSHROOT
CTOS        ; c4
DUP        ; c4 c4
SBITS      ; c4 bits
GTINT 1    ; c4 bits>1
PUSHCONT {
	LDU 256      ; pubkey c4
	LDU 64      ; pubkey timestamp c4
	LDU 1       ; pubkey [timestamp] constructor_flag memory
	LDMSGADDR
	LDU 8
	PLDU 128
	SETGLOB 12
	SETGLOB 11
	SETGLOB 10
	TRUE
	SETGLOB 1   ; pubkey [timestamp] constructor_flag
	SETGLOB 6   ; pubkey [timestamp]
	SETGLOB 3   ; D
	SETGLOB 2
}
PUSHCONT {
	PLDDICT   ; D
	; init m_casino
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	SETGLOB 10
	; init m_lastCode
	PUSHINT 0
	SETGLOB 11
	; init m_lastComment
	PUSHINT 0
	SETGLOB 12
	; set contract pubkey
	PUSHINT 0
	SWAP
	PUSHINT 64
	DICTUGET
	THROWIFNOT 61
	PLDU 256
	SETGLOB 2
	PUSHINT 0 ; timestamp
	SETGLOB 3
	PUSHINT 0 ; constructor_flag
	SETGLOB 6
	TRUE
	SETGLOB 1
}
IFELSE

.internal-alias :main_internal,        0
.internal	:main_internal
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Function: main_internal
;; param: contract_balance
;; param: msg_balance
;; param: int_msg_info
;; param: msg_body_slice
PUSHINT 0  ; main_external trans id
PUSH S2
CTOS
LDU 4       ; bounced tail
LDMSGADDR   ; bounced src tail
DROP
SETGLOB 9
MODPOW2 1
GETGLOB 4
TRUE
SETINDEXQ 1
PUSHINT 10000000
SETINDEXQ 2
NULL
SETINDEXQ 3
PUSHINT 1
SETINDEXQ 4
SETGLOB 4
IFRET
PUSH S1    ; body
SEMPTY     ; isEmpty
IFRET
PUSH S1 ; body
LDU 32  ; funcId body'
PUSH S1 ; funcId body' funcId
IFNOTRET
PUSH S1 ; funcId body' funcId
LESSINT 3            ; funcId body' funcId<3
PUSH S2              ; funcId body' funcId<3 funcId
PUSHINT 4294967293   ; funcId body' funcId<3 funcId 4294967293
GREATER              ; funcId body' funcId<3 funcId>4294967293
OR                   ; funcId body' funcId<3||funcId>4294967293
PUSHCONT {
	DROP2
	THROW 60
}
IFJMP
SWAP    ; body funcId
CALL 1
GETGLOB 7
ISNULL
PUSHCONT {
	DROP
	THROW 60
}
IF

.internal-alias :main_external,        -1
.internal	:main_external
PUSHINT -1 ; main_external trans id
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
SETGLOB 9
PUSH S1
CALL $c4_to_c7_with_init_storage$
LDU 1 ; haveSign msgSlice
SWAP
PUSHCONT {
	PUSHINT 512
	LDSLICEX ; signatureSlice msgSlice
	DUP      ; signatureSlice msgSlice msgSlice
	HASHSU   ; signatureSlice msgSlice hashMsgSlice
	ROT
	GETGLOB 2
	DUP
	SETGLOB 5
	CHKSIGNU      ; msgSlice isSigned
	THROWIFNOT 40 ; msgSlice
}
IF
LDU 64                         ; timestamp msgSlice
SWAP                           ; msgSlice timestamp
CALL $replay_protection_macro$ ; msgSlice
LDU 32  ; expireAt msgSlice
SWAP    ; msgSlice expireAt
NOW     ; msgSlice expireAt now
GREATER ; msgSlice expireAt>now
THROWIFNOT 57
LDU  32 ; funcId body
PUSH S1 ; funcId body funcId
LESSINT 3            ; funcId body' funcId<3
PUSH S2              ; funcId body' funcId<3 funcId
PUSHINT 4294967293   ; funcId body' funcId<3 funcId 4294967293
GREATER              ; funcId body' funcId<3 funcId>4294967293
OR                   ; funcId body' funcId<3||funcId>4294967293
PUSHCONT {
	DROP2
	THROW 60
}
IFJMP
SWAP    ; body funcId
CALL 1
GETGLOB 7
ISNULL
PUSHCONT {
	DROP
	THROW 60
}
IF

.globl	m_lastCode
.public	m_lastCode
.type	m_lastCode, @function
CALL $c4_to_c7$
GETGLOB 11
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST xb90bafd1
PUSH S1
STUR 8
ENDC
PUSHINT 1
SENDRAWMSG
TRUE
SETGLOB 7

.globl	m_lastComment
.public	m_lastComment
.type	m_lastComment, @function
CALL $c4_to_c7$
GETGLOB 12
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST xfd277245
PUSH S1
STUR 128
ENDC
PUSHINT 1
SENDRAWMSG
TRUE
SETGLOB 7

